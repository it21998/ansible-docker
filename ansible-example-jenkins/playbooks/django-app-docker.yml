---
- hosts: deploymentdocker

  vars:
    app_dir: "{{user_dir}}/devopsAdmin"
    user_dir: "/home/azureuser"
    git_repo_url: "https://github.com/it21998/devopsAdmin.git"
    git_repo_branch: "main"

  tasks:

  - name: print user_dir
    debug:
      msg: "user dir is {{user_dir}}"

  - name: Run whoami without become.
    command: whoami
    changed_when: false
    become: false
    register: whoami

  - name: Set a fact with the user name.
    set_fact:
      login_user: "{{ whoami.stdout }}"

  - name: print user name
    debug:
      msg: "login user is {{login_user}}"

  - name: print user dir
    debug:
      msg: "login dir is {{user_dir}}"

  - name: ensure github.com is a known host
    lineinfile:
      dest: "{{user_dir}}/.ssh/known_hosts"
      create: yes
      state: present
      line: "{{lookup('pipe', 'ssh-keyscan -t rsa github.com')}}"
      regexp: "^github\\.com"

  - name: clone django project
    git:
      repo: "{{git_repo_url}}"
      version: "{{git_repo_branch}}"
      clone: yes
      force: yes
      dest: "{{app_dir}}"
    changed_when: true
  


  - name: copy env file
    shell : "cp {{app_dir}}/student_management/student_management/.env.example {{app_dir}}/student_management/student_management/.env"

  - name: populate  ~/.env
    lineinfile:
      dest: "{{app_dir}}/student_management/student_management/.env"
      state: present
      regexp: "^{{item.key}}="
      line: "{{item.key}}='{{item.value}}'"
    with_items:
      - "{{django.env | dict2items}}"

  - name: Get my public IP
    ipify_facts:

  - debug: var=ipify_public_ip

  # - name: print ip
  #   debug:
  #     msg: "ALLOWED_HOSTS={{ansible_all_ipv4_addresses}}"

  - name: add ip in django ALLOWED_HOSTS
    lineinfile:
      dest: "{{app_dir}}/student_management/student_management/settings.py"
      regexp: "^ALLOWED_HOSTS ="
      line: "ALLOWED_HOSTS = ['{{ipify_public_ip}}', 'localhost','127.0.1.1']"
      state: present

    
  - name: userresg
    command: id
    register: user_groups

  - debug:
      msg: "Groups {{user_groups}}"

  - name: check if docker-compose exists
    stat: 
      path: "{{app_dir}}/docker-compose.yml"
    register: docker_compose_file

  - debug:
      msg: "docker_compose_file {{docker_compose_file}}"


      
  - name: build and run an image
    block:
    - name: build container image
      docker_image:
        name: mydjango:latest
        build:
          path: "{{app_dir}}"
        source: build
        state: present

    - name: Start a container with a command
      docker_container:
        name: mydjangoapp
        image: mydjango:latest
        #command: ["sleep", "infinity"]
        env_file: "{{app_dir}}/.env"
    when: docker_compose_file.stat.exists == False

  - name: run docker docker-compose
    block:
      - name: Run `docker-compose up`
        docker_compose:
          project_src: "{{app_dir}}"
          build: yes
        register: output

      - debug:
          var: output
  
    when: docker_compose_file.stat.exists == True

  - name: Run makemigrations on django
    command: docker-compose exec -T django python manage.py makemigrations
    args:
      chdir: /home/azureuser/devopsAdmin

  - name: Run migrate on django
    command: docker-compose exec -T django python manage.py migrate
    args:
      chdir: /home/azureuser/devopsAdmin
  
  - name: Run sqlfile on db
    command: docker-compose exec -T db psql -U myprojectuser myproject < /home/azureuser/db/sqlfile.sql
    args:
      chdir: /home/azureuser/devopsAdmin